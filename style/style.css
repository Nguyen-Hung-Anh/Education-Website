*{
  margin: 0;
  padding: 0;
  font-family: "Roboto", sans-serif;   /* In CSS, the quotes around font family names are optional unless the font family name contains spaces or special characters. Since Roboto does not contain spaces or special characters, the quotes are not strictly necessary. However, it is a common practice to include quotes around font names for consistency and to avoid potential issues with certain font names or future modifications. */
  box-sizing: border-box;
}

.header{
  min-height: 100vh;  /* 100 viewport right now not whole page */
  width: 100%;  /*100% of the page*/
  /* background-image: - This property is used to set the background image of an element. Linear-gradient is a function that creates an image consisting of a smooth transition between two or more specified colors. */
  background-image: linear-gradient(rgba(71, 94, 120, 0.2), rgba(124, 149, 178, 0.4)), url(../images/background.jpg); /* The ../ notation means the image is located one directory level up from the current location and then in the images folder. */
  background-position: center; /*move to see the center of picture */
  background-size: cover;
  position: relative; /* This is common when implementing dropdown menus, tooltips, or other elements that need precise positioning relative to the parent li element.*/
}

nav{
  /*make the logo and links center, and inline-block (just logo and whole ul => not individual li)*/
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1% 4%
}

nav img{ /*logo picture*/
  width: 150px;
  background-size: cover;
} 

.nav-links{
  flex-grow: 1; /*How much of the extra space should be distributed to the items*/
  flex-shrink: 1; /*This property specifies how much a flex item should shrink relative to the rest of the flex items inside the same container when there is not enough space.*/
  flex-basis: 0; /* This property specifies the initial main size of a flex item before any remaining space is distributed or the item is shrunk. */
  text-align: right;
  /*shorthand: flex: 1 or flex: 1 1 0; it means 1 1 0 for grow shrink basis*/
}

.nav-links ul li{
  list-style: none; /*no markers*/
  display: inline-block;  /*make each individual li inline-block (make them horizontally)*/
  padding: 8px 12px;
  position: relative;
}

.nav-links ul li a{ 
  color: #fff;
  text-decoration: none; /*text-decoration: text-decoration-line text-decoration-color text-decoration-style text-decoration-thickness|initial|inherit; =>> text-decoration: none; is used to get rid of underline*/
  font-size: 13px;
}

.nav-links ul li::after{ /*after and before the content not the tag (element). we can't have pseudo element for self closing tag: e.x: <input>. Because it has no centent
  */
  content: ''; /*This creates an empty pseudo-element. The ::after pseudo-element is used to insert content after the content of the selected element. An empty string means no text will be added, but the element itself will still be generated.*/
  width: 0%; /*Sets the initial width of the pseudo-element to 0%. This means it won't be visible initially.*/
  height: 2px; /*Sets the height of the pseudo-element to 2 pixels. This defines the thickness of the pseudo-element.*/
  background: #f44336;
  display: block; /*Maybe use display: inline-block
  Elements with display: inline can't have explicit dimensions set on them - it will have no effect. And so, because the pseudo element has no non-empty content, it will appear with 0 dimensions and thus invisible.
  inline-block or block set to inside li and the ::ater/before
  */
  margin: auto; /*Centers the pseudo-element horizontally within its containing element. This works because the pseudo-element is a block element with a specified width (even though it's initially 0%).*/
  transition: 0.15s; /*Applies a transition effect to the pseudo-element, specifying that any changes to the width property should be animated over 0.5 seconds. This creates a smooth animation effect when the width changes.*/
}

.nav-links ul li:hover::after{
  width: 100%;
}

.text-box{
  width: 90%; /*width: 100% making the content touch the edges, which can look cramped and less aesthetically pleasing.*/
  text-align: center;
  color: #fff;
  position: absolute; /*this means only the top-left corner of the box is centered, not the entire box itself.*/
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);   /*shifts the .text-box element by 50% of its own width to the left and 50% of its own height up. This adjustment ensures that the center of the .text-box is aligned with the center of the containing block.*/
}

.text-box h1{
  font-size: 65px;
}

.text-box p{
  margin: 18px 0 40px;
  font-size: 20px;
  color: #fff;
}

.hero-btn{
  display: inline-block;
  text-decoration: none;
  color: #fff;
  border: 1px solid #fff;
  padding: 15px 30px;
  font-size: 17px;
  background: transparent;
  position: relative; /* The position: relative; property in the .hero-btn class is useful for a few reasons:
  Future Positioning: It allows for future positioning adjustments of child elements. If you ever decide to add pseudo-elements (::before or ::after) or other child elements inside .hero-btn that require specific positioning, you can use position: absolute; on those elements. The position: relative; on .hero-btn will ensure these absolutely positioned elements are positioned relative to .hero-btn, not some other ancestor element.
  Layering Context: It creates a new stacking context. This means if you need to adjust the z-index of the .hero-btn or its children, having position: relative; ensures that these changes apply correctly within the context of the button.
   */
  cursor: pointer;
  transition: 0.15s;
}

.hero-btn:hover{
  border: 1px solid #f44336;
  background-color: #f44336;
}

nav .fa-solid{
  display: none; /*hide the close and menu buttons
  When you set display: none; on an element, it completely removes that element from the document flow. This means the element is not rendered on the page, and it does not take up any space.*/
}

@media(max-width: 700px){ /* we can write all @media together, but I separate it for easily understading*/
  .text-box h1{
    font-size: 20px;
  }

  .nav-links ul li{
    display: block;
  }

  .nav-links{
    position: fixed; /*It's position: absolute originally, so that I can see the nav-link bar just by scorll horizontally the scrollbar. Then I change it to position: fixed so that I dont see the nav links (in the far right hand side) when I use the scrollbar on mobile screen*/
    background-color: #f44336;
    height: 100vh;
    width: 150px;
    top: 0;
    right: -200px; /*firstly, set it 0 to see and change the appearance, after that we want to hide it => use -200px;*/
    text-align: left;
    z-index: 1; /*Without any z-index specified, elements are stacked in the order they appear in the HTML. Later elements are stacked above earlier ones. In this case, the .text-box appears after the <nav> element within the <section class="header">, so it will be stacked above the <nav> by default.*/
    transition: 0.15s;
  }

  nav .fa-solid{
    display: block; /*make the close/menu button visible
    When you change display: none; to display: block;, the element is rendered as a block-level element. This means it takes up the full width available (by default) and becomes visible on the page.
    Changing display: none; to display: block; (or any other display value) makes the element visible and included in the document flow.
    */
    color: #fff;
    margin: 10px;
    font-size: 22px;
    cursor: pointer;
  }

  .nav-links ul{
    padding: 30px;
  }
}

/*Course*/
.course{
  width: 80%;
  margin: auto;
  text-align: center; /*This property will be inherited by all children inside course*/
  padding-top: 100px; 
}

.course h1{
  font-size: 36px;
  font-weight: 600; /* sets how thick or thin characters in text should be displayed.*/
}

.course p{
  color: #5d5d5d;
  font-size: 16px;
  font-weight: 500;
  line-height: 22px; /*The default value for the line-height property in CSS is normal. The exact numerical value of normal depends on the browser, but it typically ranges between 1.0 and 1.2 times the font size.*/
  padding: 10px;
}

.row{
  margin-top: 5%;
  display: flex; /*set flex to use flex-basis in child course-col below*/
  justify-content: space-between;
}

.course-col{
  flex-basis: 30%; /* Sets the initial size of the flex item to 30% of the container's width. This allows for three items per row with some spacing. */
  background-color: #ffe5e5;
  border-radius: 15px;
  margin-bottom: 5%;
  padding: 20px 12px;
  box-sizing: border-box; /*With box-sizing: border-box; content need to reduces to remain the width that we want.*/
  transition: 0.15s;
}

h3{
  text-align: center;
  font-weight: 600; 
  margin: 10px 0;
}

.course-col:hover{
  /*h/v are set to 0
  with h: positive value shifts the shadow to the right, while a negative value shifts it to the left.
  with v: positive value shifts the shadow down, while a negative value shifts it up.
  40px (blur radius): higher value makes the shadow more blurred.
  0px (spread radius): positive value will cause the shadow to expand and grow bigger, while a negative value will cause it to shrink
  */
  box-shadow: 0 0 25px 10px rgba(0,0,0,0.5);
}

.green-flag{
  background-color: #b7ff9f;
}

.blue-flag{
  background-color: #a9c0ff;
}

.red-flag{
  background-color: #ffa0a0;
}

@media(max-width: 700px){
  .row{
    flex-direction: column;
  }
}

/*community*/
.community{
  width: 80%;
  margin: auto;
  text-align: center;
  padding-top: 50px;
}

.community-col{
  flex-basis: 30%; /*With three .community-col elements per row, this leaves 4% of the total width (100% - 3 * 32%) for margins or spacing between columns.*/
  border-radius: 10px;
  margin-bottom: 30px;
  position: relative; /*Establishes a reference point for absolutely positioned elements within the .community-col element.*/
  overflow: hidden;
}

.community-col img{
  width: 100%; /*Ensures that the image within the .community-col element fills 100% of the width of its container. This helps in making the image responsive and fitting within the column's dimensions. It also helps height to change by itself*/
  display: block; /* You need to add display: block to the community-col img to remove any extra space that might appear below the image. By default, images are inline elements, which can cause some unexpected whitespace (typically a few pixels of space) to appear below the image due to the line-height property of the text they are aligned with. Setting display: block makes the image a block-level element, eliminating this extra space and ensuring that the image takes up only the space defined by its container. In 48:24, it deletes the space below the image make it round
  Stuck here!!!!!!!!
  */
}

.layer{
  background: transparent; /*associated with the .layer:hover below (background)*/
  height: 100%; /*when set width/height first we just set the red for the text (box-size)*/
  width: 100%;
  position: absolute; /*Use this absolute to relative community-col to set top/left associated with height/width above*/
  top: 0;
  left: 0;
  transition: 0.15s;
}

.layer:hover{
  background: rgba(226,0,0,0.6);
}

.layer h3{
  width: 100%;
  font-weight: 500;
  color: #fff; /*make the word like LONDON white*/
  font-size: 26px;
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
  opacity: 0;
  transition: 0.15s;
}

.layer:hover h3{
  bottom: 32%;
  opacity: 1;
}

/* mentors   */
.mentors{
  width: 80%;
  margin: auto;
  text-align: center;
  padding-top: 100px;
}

.mentors-col {
  /* Sets the initial size of the flex item to 31% of the container's width. This allows for three items per row with some spacing. */
  flex-basis: 30%;
  border-radius: 10px;
  margin-bottom: 3%;
  text-align: left;
}

.mentors-col img{
  /* When you use width: 100%, the image scales to fill the full width of its parent container. This scaling adjusts the height proportionally, maintaining the aspect ratio of the image.  */
  width: 100%;
  border-radius: 10px;
}

.mentors-col h3{
  margin-top: 16px;
  margin-bottom: 15px;
  text-align: left;
}

/* testimonials */
.testimonials{
  width: 80%;
  margin: auto;
  padding-top: 100px;
  text-align: center;
}

.testimonial-col{
  flex-basis: 40%;  
  border-radius: 10px;
  margin-bottom: 5%;  
  text-align: left;
  background-color: #fff3f3;
  padding: 25px;
  cursor: pointer;
  display: flex;
}

.testimonial-col img{
  height: 35px;
  margin-left: 3px;
  margin-right: 20px;
  border-radius: 50%;
}

.testimonial-col h3{
  margin-top: 15px;
  text-align: left;
} 

.testimonial-col .fa-solid{
  color: #4661ab
}

@media(max-width: 700px){
  .testimonial-col img{
    height: 30px; 
    margin-left: 0px;
    margin-right: 15px;
  }
}

/* Call to Action */
.cta{
  width: 80%;
  margin: 100px auto 120px auto; /*100 for top and 120 bottom, auto for left/right*/
  background-image: linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.65)), url(../images/cta.jpeg);
  background-position: center;
  background-size: cover;
  border-radius: 2px;
  text-align: center; 
  padding: 100px 0;
}

.cta h1{
  color: #fff;
  margin-bottom: 50px;
}

@media(max-width: 700px){
  .cta h1{
    font-size: 20px;
  }
}

/* footer */
.footer{
  width: 90%;
  text-align: center;
  padding: 20px 0;
  margin: auto;
}

.footer h1{
  margin-bottom: 25px;
  margin-top: 20px;
  font-weight: 600;
}

.icons .fa-brands{
  margin: 0 15px;
  cursor: pointer;
  padding: 28px 0;
}

.fa-heart{
  color: #357c1e
}

/* ---------------------ABOUT US PAGE -----------------------*/
.sub-header{
  height: 50vh;
  width: 100%;
  /* Purpose of the Gradient: By using a gradient with the same start and end colors, you effectively create a solid color overlay. */
  /* Transparency Effect: The alpha value of 0.7 means that the overlay is semi-transparent, allowing the underlying image to be visible but with a darkened effect. This can be used to enhance text readability or to create a specific visual aesthetic. */
  background-image: linear-gradient(rgba(4,9,30,0.35), rgba(4,9,30,0.25)), url(../images/aboutus.jpg);
  background-position: center;
  background-size: cover;
  text-align: center;
  color: #fff;
}

.sub-header h1{
  margin-top: 20px;
}

.about-us{
  width: 80%;
  margin: auto;
  padding-top: 80px;
  padding-bottom: 70px;
}

.about-col{
  flex-basis: 48%; 
  padding: 30px 2px;
}

.about-col img{
  width: 100%;
}

.about-col p{
  padding: 15px 0 25px;
  font-size: 14px;
}

/*This and hero-btn set the same button, so which one in after will take the responsibility*/
.red-btn{
  border: 1px solid #f44336;
  background-color: transparent;
  color: #f44336
}

.red-btn:hover{
  color: white;
}

/*-------interview-content-------*/
.interview-content{
  width: 80%;
  margin: auto;
  padding: 60px 0;
}

.interview-left{
  flex-basis: 65%;
}

.interview-left img{
  width: 100%;
}

.interview-left h2{
  color: #222;
  font-weight: 900;
  margin: 40px 0;
}

.interview-left p{
  color: #7c7c7c;
}

.interview-right{
  flex-basis: 31%;
}

.interview-right h3{
  background-color: #fff306;
  color: #000;  
  padding: 10px;
  font-size: 20px;
  margin-bottom: 20px;
}

.interview-right div{
  display: flex;
  align-items: center;
  justify-content: space-between;
  color: #555;
  padding: 8px;
  box-sizing: border-box;
  /*The .interview-right div elements are using display: flex; to align their children. By using box-sizing: border-box;, you ensure that the padding (8px in this case) does not cause the element to exceed its allocated space within the flex container. This makes it easier to control the layout and spacing between elements*/
}

.comment-box{
  border: 1px solid #afafaf;
  margin: 60px 0; 
  padding: 15px 20px;
}

.comment-box h3{
  text-align: left;
}

.comment-form input, .comment-form textarea{
  width: 100%;
  padding: 10px;
  margin: 15px 0;
  box-sizing: border-box; /*Use border box here because padding above*/ 
  border: none; /*delete border of two input (by default they have borders)*/
  outline: none; /* outline: none;: This removes the default outline that browsers often display around input and textarea elements when they are focused (i.e., clicked or selected). This can be useful for custom styling. */
  background: #e3e3e3;
}

.comment-form button{
  margin: 5px 0;
}

@media(max-width: 700px){
  .sub-header h1{
    font-size: 22px;
    margin-top: 50px;
  }
}

/* -------contact content----- */
.location{
  width: 80%;
  margin: auto;
  padding: 80px 0;
}

.location iframe{
  width: 100%; /*make the map really responsive*/
}

.contact-us{
  width: 80%;
  margin: auto;
} 

.contact-col{
  flex-basis: 48%;
  margin-bottom: 50px;
}

.contact-col div{
  display: flex;
  align-items: center;
  margin-bottom: 40px;
}

.contact-col div .fa-solid{
  font-size: 28px;
  color: #67d6f2;
  margin: 10px;
  margin-right: 20px;
}

.contact-col div h5{
  font-size: 20px;
  margin-bottom: 5px;
  color: #555;
  font-weight: 400;
}

.contact-col input, .contact-col textarea{
  width: 100%;
  padding: 15px;
  margin-bottom: 17px;
  outline: none; /* outline: none;: This removes the default outline that browsers often display around input and textarea elements when they are focused (i.e., clicked or selected). This can be useful for custom styling. */
  border: 1px solid #ccc;
  box-sizing: border-box;
}

/* Curriculum in courses */
.curriculum{
  width: 80%;
  margin: auto;
  margin-top: 50px;
  text-align: center;
}

.table-container{
  width: 100%;
  margin-top: 40px;
}

table{
  border-collapse: collapse;
  width: 80%;  
  border: 1px solid #bdc3c7;
  box-shadow: 2px 2px 12px rgba(0,0,0,0.2), -1px -1px rgba(0,0,0,0.2);
  margin: auto;
  margin-bottom: 7%;
}

tr{
  transition: all .15s ease-in;
  cursor: pointer;
}

th, td{
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid #ddd;
}

#header-table{
  background-color: #16a085;
  color: #fff;
}

tr:hover{
  background-color: #f5f5f5;
  transform: scale(1.03);
  box-shadow: 2px 2px 12px rgba(0,0,0,0.2), -1px -1px 8px rgba(0,0,0,0.2);
}

@media(max-width: 768px) {
  table{
    width: 90%;
    margin: auto;
  }

  th, td{
    padding: 8px;
  }
}

/* tip content inside interview page */
.tip-content{
  width: 80%;
  margin: auto;
  margin-bottom: 5%;
}

.tip-col img{
  height: 70px;
  width: 70px;
  background-size: cover;
  margin-right: 25px;
}

.tip-col{
  flex-basis: 40%;
}

.tip-col div{
  display: flex;
}

.tip-col h5{
  margin-bottom: 25px;
}

.tip-col p{
  font-size: 18px;
  font-weight: 300;
}