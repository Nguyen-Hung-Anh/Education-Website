*{
  margin: 0;
  padding: 0;
  font-family: "Roboto", sans-serif;
}

.header{
  min-height: 100vh;
  width: 100%;
  background-image: linear-gradient(rgba(71, 94, 120, 0.3), rgba(124, 149, 178, 0.55)), url(images/background.jpg);
  background-position: center; /*to move and see the center of picture in the center of the browser */
  background-size: cover; /*smaller the picture and make it cover the browser (maybe it's picture is too large)*/
  position: relative;
}

nav{
  /*make the logo and links center, and inline-block (just logo and whole ul => not individual li)*/
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 2% 6%
}

nav img{
  /*logo picture*/
  width: 80px;
}

.nav-links{
  flex-grow: 1; /*The element can grow to fill the available space in the flex container (the nav element).*/
  flex-shrink: 1; /*The element can shrink if necessary.*/
  flex-basis: 0; /*The initial size of the element before growing or shrinking is 0.*/
  text-align: right;
  /*shorthand: flex: 1; */
}

.nav-links ul li{
  list-style: none; /*no markers*/
  display: inline-block;  /*make each individual li inline-block (make them horizontally)*/
  padding: 8px 12px;
  position: relative;
}

.nav-links ul li a{ 
  color: #fff;
  text-decoration: none; /*text-decoration: text-decoration-line text-decoration-color text-decoration-style text-decoration-thickness|initial|inherit; =>> text-decoration: none; is used to get rid of underline*/
  font-size: 13px;
}


.nav-links ul li::after{ /*after and before the content not the tag (element)*/
  content: ''; /*This creates an empty pseudo-element. The ::after pseudo-element is used to insert content after the content of the selected element. An empty string means no text will be added, but the element itself will still be generated.*/
  width: 0%; /*Sets the initial width of the pseudo-element to 0%. This means it won't be visible initially.*/
  height: 2px; /*Sets the height of the pseudo-element to 2 pixels. This defines the thickness of the pseudo-element.*/
  background: #f44336;
  display: block; /*Makes the pseudo-element a block-level element, ensuring it will take up the full width available and appear on its own line.*/
  margin: auto; /*Centers the pseudo-element horizontally within its containing element. This works because the pseudo-element is a block element with a specified width (even though it's initially 0%).*/
  transition: 0.15s; /*Applies a transition effect to the pseudo-element, specifying that any changes to the width property should be animated over 0.5 seconds. This creates a smooth animation effect when the width changes.*/
}

.nav-links ul li:hover::after{
  width: 100%;
}

.text-box{
  width: 90%; /*width: 100% making the content touch the edges, which can look cramped and less aesthetically pleasing.*/
  color: #fff;
  position: absolute;

  /*this means only the top-left corner of the box is centered, not the entire box itself.*/
  top: 50%;
  left: 50%;
  /*shifts the .text-box element by 50% of its own width to the left and 50% of its own height up. This adjustment ensures that the center of the .text-box is aligned with the center of the containing block.*/
  transform: translate(-50%, -50%);
  text-align: center;
}

.text-box h1{
  font-size: 62px;
}

.text-box p{
  margin: 10px 0 40px;
  font-size: 16px;
  color: #fff;
}

.hero-btn{
  display: inline-block;
  text-decoration: none;
  color: #fff;
  border: 1px solid #fff;
  padding: 12px 34px;
  font-size: 16px;
  background: transparent;
  position: relative;
  cursor: pointer;
}

.hero-btn:hover{
  border: 1px solid #f44336;
  background-color: #f44336;
  transition: 0.15s;
}

nav .fa-solid{
  display: none; /*hide the close and menu buttons*/
}

/* we can write it together, but I separate it for easily understading*/

@media(max-width: 700px){
  .text-box h1{
    font-size: 20px;
  }

  .nav-links ul li{
    display: block;
  }

  .nav-links{
    position: fixed; /*It's position: absolute originally, so that I can see the nav-link bar just by scorll horizontally the scrollbar. Then I change it to position: fixed so that I dont see the nav links (in the far right hand side) when I use the scrollbar on mobile screen*/
    background-color: #f44336;
    height: 100vh;
    width: 200px;
    top: 0;
    right: -200px; /*firstly, set it 0 to see and change the appearance, after that we want to hide it => use -200px;*/
    text-align: left;
    z-index: 1;
    transition: 0.15s;
  }

  nav .fa-solid{
    display: block; /*make the close button visible*/
    color: #fff;
    margin: 10px;
    font-size: 22px;
    cursor: pointer;
  }

  .nav-links ul{
    padding: 30px;
  }
}



/*Course*/
.course{
  width: 80%;
  margin: auto;
  text-align: center;
  padding-top: 100px;
}

.course h1{
  font-size: 36px;
  font-weight: 600;
}

.course p{
  color: #777;
  font-size: 16px;
  font-weight: 300;
  line-height: 22px;
  padding: 10px;
}

.row{
  margin-top: 5%;
  display: flex;
  justify-content: space-between;
}

.course-col{
  /* Sets the initial size of the flex item to 30% of the container's width. This allows for three items per row with some spacing. */
  flex-basis: 30%;
  background-color: #fff3f3;
  border-radius: 10px;
  margin-bottom: 5%;
  padding: 20px 12px;
  /*With box-sizing: border-box; content need to reduces to remain the width that we want.*/
  box-sizing: border-box;
  transition: 0.15s;
}

h3{
  text-align: center;
  font-weight: 600;
  margin: 10px 0;
}

.course-col:hover{
  /*h/v are set to 0
  with h: positive value shifts the shadow to the right, while a negative value shifts it to the left.
  with v: positive value shifts the shadow down, while a negative value shifts it up.
  20px (blur radius): higher value makes the shadow more blurred.
  0px (spread radius): positive value will cause the shadow to expand and grow bigger, while a negative value will cause it to shrink
  */
  box-shadow: 0 0 40px 0px rgba(0,0,0,0.4);
}

/*Can write it in one media, but seperate for understanding easily.*/
@media(max-width: 700px){
  .row{
    flex-direction: column;
  }
}

/*campus*/

.campus{
  width: 80%;
  margin: auto;
  text-align: center;
  padding-top: 50px;
}


.campus-col{
  flex-basis: 32%; /*With three .campus-col elements per row, this leaves 4% of the total width (100% - 3 * 32%) for margins or spacing between columns.*/
  border-radius: 10px;
  margin-bottom: 30px;
  position: relative; /*Establishes a reference point for absolutely positioned elements within the .campus-col element.*/
  overflow: hidden; /*why do I need this?*/
}

.campus-col img{
  width: 100%; /*Ensures that the image within the .campus-col element fills 100% of the width of its container. This helps in making the image responsive and fitting within the column's dimensions.*/
  display: block; 
  /* You need to add display: block to the campus-col img to remove any extra space that might appear below the image. By default, images are inline elements, which can cause some unexpected whitespace (typically a few pixels of space) to appear below the image due to the line-height property of the text they are aligned with. Setting display: block makes the image a block-level element, eliminating this extra space and ensuring that the image takes up only the space defined by its container. In 48:24, it deletes the space below the image make it round*/
}

/* QUESTION: With the below layout, the london word in horizontally center in the top of the picture. I understand why it stays on the top but don't understand why it centers horizontally in the picture */
.layer{
  background: transparent; /*associated with the .layer:hover below (background)*/
  height: 100%; /*when set width/height first we just set the red for the text (box-size)*/
  width: 100%;
  position: absolute; /*Use this absolute to relative campus-col to set top/left associated with height/width above*/
  top: 0;
  left: 0;
  transition: 0.15s;
}

.layer:hover{
  background: rgba(226,0,0,0.6);
}

.layer h3{
  width: 100%;
  font-weight: 500;
  color: #fff; /*make the word like LONDON white*/
  font-size: 26px;
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
  opacity: 0;
  transition: 0.15s;
}

.layer:hover h3{
  bottom: 37%;
  opacity: 1;
}

/* facilities */

.facilities{
  width: 80%;
  margin: auto;
  text-align: center;
  padding-top: 100px;
}

.facilities-col {
  /* Sets the initial size of the flex item to 31% of the container's width. This allows for three items per row with some spacing. */
  flex-basis: 31%;
  border-radius: 10px;
  margin-bottom: 5%;
  text-align: left;
}

.facilities-col img{
  /* When you use width: 100%, the image scales to fill the full width of its parent container. This scaling adjusts the height proportionally, maintaining the aspect ratio of the image.  */
  width: 100%;
  border-radius: 10px;
}

.facilities-col h3{
  margin-top: 16px;
  margin-bottom: 15px;
  text-align: left;
}

/* testimonials */

.testimonials{
  width: 80%;
  margin: auto;
  padding-top: 100px;
  text-align: center;
}

.testimonial-col{
  flex-basis: 44%;  
  border-radius: 10px;
  margin-bottom: 5%;
  text-align: left;
  background-color: #fff3f3;
  padding: 25px;
  cursor: pointer;
  display: flex;
}

.testimonial-col img{
  height: 40px;
  margin-left: 5px;
  margin-right: 30px;
  border-radius: 60%;
}

.testimonial-col h3{
  margin-top: 15px;
  text-align: left;
}

.testimonial-col .fa-solid{
  color: #4661ab
}

@media(max-width: 700px){
  .testimonial-col img{
    margin-left: 0px;
    margin-right: 15px;
  }
}

/* Call to Action */
.cta{
  width: 80%;
  margin: 100px auto; /*100 for top and bottom, auto for left/right*/
  background-image: linear-gradient(rgba(0,0,0,0.2), rgba(0,0,0,0.5)), url(images/background.jpg);
  background-position: center;
  background-size: cover;
  border-radius: 10px;
  text-align: center;
  padding: 100px 0;
}

.cta h1{
  color: #fff;
  margin-bottom: 40px;
}

@media(max-width: 700px){
  .cta h1{
    font-size: 24px;
  }
}

/* footer */

.footer{
  width: 100%;
  text-align: center;
  padding: 30px 0;
}

.footer h4{
  margin-bottom: 25px;
  margin-top: 20px;
  font-weight: 600;
}

.icons .fa-brands{
  margin: 0 13px;
  cursor: pointer;
  padding: 18px 0;
}

.fa-heart{
  color: #357c1e
}

/* ------------------------------ABOUT US PAGE -------------------------------------*/
.sub-header{
  height: 50vh;
  width: 100%;
  /* Purpose of the Gradient: By using a gradient with the same start and end colors, you effectively create a solid color overlay. */
  /* Transparency Effect: The alpha value of 0.7 means that the overlay is semi-transparent, allowing the underlying image to be visible but with a darkened effect. This can be used to enhance text readability or to create a specific visual aesthetic. */
  background-image: linear-gradient(rgba(4,9,30,0.45), rgba(4,9,30,0.35)), url(images/aboutus.jpg);
  background-position: center;
  background-size: cover;
  text-align: center;
  color: #fff;
}

.sub-header h1{
  margin-top: 100px;
}

.about-us{
  width: 80%;
  margin: auto;
  padding-top: 80px;
  padding-bottom: 50px;
}

.about-col{
  flex-basis: 48%; /*When we add this (but do not add .about-col img below yet), the picture still overflow to other blocks, so we need to set width: 100% below to make sure the picture only take the width of it's parent */
  padding: 30px 2px;
}

.about-col img{
  width: 100%;
}

.about-col p{
  padding: 15px 0 25px;
}

/*This and hero-btn set the same button, so which one in after will take the responsibility*/
.red-btn{
  border: 1px solid #f44336;
  background-color: transparent;
  color: #f44336
}


.red-btn:hover{
  color: white;
}

/* blog-content */
.blog-content{
  width: 80%;
  margin: auto;
  padding: 60px 0;
}

.blog-left{
  flex-basis: 65%;
}

.blog-left img{
  width: 100%;
}

.blog-left h2{
  color: #222;
  font-weight: 600;
  margin: 30px 0;
}

.blog-left p{
  color: #999;
  padding: 0
}

.blog-right{
  flex-basis: 32%;
}

.blog-right h3{
  background-color: #f44336;
  color: #fff;
  padding: 7px 0;
  font-size: 16px;
  margin-bottom: 20px;

}

.blog-right div{
  display: flex;
  align-items: center;
  justify-content: space-between;
  color: #555;
  padding: 8px;
  box-sizing: border-box;
  /*The .blog-right div elements are using display: flex; to align their children. By using box-sizing: border-box;, you ensure that the padding (8px in this case) does not cause the element to exceed its allocated space within the flex container. This makes it easier to control the layout and spacing between elements*/
}

.comment-box{
  border: 1px solid #ccc;
  margin: 50px 0;
  padding: 10px 20px;
}

.comment-box h3{
  text-align: left;
}

.comment-form input, .comment-form textarea{
  width: 100%;
  padding: 10px;
  margin: 15px 0;
  box-sizing: border-box; /*Use border box here because margin above*/
  border: none;
  outline: none;
  background: #f0f0f0;
}

.comment-form button{
  margin: 10px 0;
}

@media(max-width: 700px){
  .sub-header h1{
    font-size: 22px;
    margin-top: 50px;
  }
}

.location{
  width: 80%;
  margin: auto;
  padding: 80px 0;
}

.location iframe{
  width: 100%; /*make the map really responsive*/
}

.contact-us{
  width: 80%;
  margin: auto;
} 

.contact-col{
  flex-basis: 48%;
  margin-bottom: 30px;
}

.contact-col div{
  display: flex;
  align-items: center;
  margin-bottom: 40px;
}

.contact-col div .fa-solid{
  font-size: 28px;
  color: #f44336;
  margin: 10px;
  margin-right: 30px;
}

.contact-col div h5{
  font-size: 20px;
  margin-bottom: 5px;
  color: #555;
  font-weight: 400;
}

.contact-col input, .contact-col textarea{
  width: 100%;
  padding: 15px;
  margin-bottom: 17px;
  /* outline: none;: This removes the default outline that browsers often display around input and textarea elements when they are focused (i.e., clicked or selected). This can be useful for custom styling. */
  outline: none;
  border: 1px solid #ccc;
  box-sizing: border-box;
}